import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  Image,
  SafeAreaView,
  TouchableOpacity,
  Dimensions,
  ScrollView,
  Platform,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { styles } from './styles';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { MainStackParamList } from '../../navigation/MainStackNavigator';
import TriviaCard from '../../components/TriviaCard/TriviaCard';
import TriviaCardScreen5 from '../../components/TriviaCard/TriviaCardScreen5';
import GlossaryGame from '../../components/GlossaryGame/GlossaryGame_fixed';
import TypewriterList from '../../components/TypewriterText/TypewriterList';
import ImageTriviaCard from '../../components/ImageTriviaCard/ImageTriviaCard';
import StorySlide from '../../components/StorySlide/StorySlide';
import { Confetti } from '../../components/TriviaCard/Confetti';

const { width, height } = Dimensions.get('window');

type CnneScreenNavigationProp = NativeStackNavigationProp<MainStackParamList, 'Cnne'>;

interface LessonStep {
  title: string;
  description?: string;
  image?: any;
  isTrivia?: boolean;
  isNewTrivia?: boolean;
  isGlossary?: boolean;
  isAchievements?: boolean;
  isImageTrivia?: boolean;
  isStory?: boolean;
}

const lessonSteps: LessonStep[] = [
  {
    title: 'Bienvenida',
    description: 'Hoy conocer√°s una instituci√≥n muy importante para Guatemala: la Comisi√≥n Nacional de Energ√≠a El√©ctrica o CNEE.',
    image: require('../../assets/cnee.png'),
  },
  {
    title: '¬øQu√© es la CNEE?',
    description: 'La CNEE es la instituci√≥n que dirige el sector el√©ctrico de Guatemala. No genera electricidad, pero trabaja todos los d√≠as para que los guatemaltecos recibamos un servicio de energ√≠a de calidad, sin cortes y con precios estables.',
    image: require('../../assets/quees.png'),
  },
  {
    title: '¬øQu√© hace la CNEE?',
    description: `‚óè  Aplica la ley: hace cumplir la ley de electricidad.\n
‚óè  Protege los derechos de quienes usamos la energ√≠a.\n
‚óè  Vigila que las empresas del sector el√©ctrico act√∫en correctamente.\n
‚óè  Define cu√°nto deben cobrar las empresas distribuidoras por llevar la electricidad a los hogares y comercios.\n
‚óè  Resuelve conflictos: ayuda a resolver desacuerdos entre empresas del sector.\n
‚óè  Crea normas: establece reglas t√©cnicas que deben cumplirse.\n
‚óè  Permite el uso de redes para utilizar las redes de energ√≠a.`,
  },
  {
    title: '¬°Pongamos a prueba tus conocimientos!',
    isTrivia: true,
  },
  {
    title: '¬øQu√© ha logrado la CNEE?',
    description: `‚óè  Inversi√≥n extranjera: empresas de otros pa√≠ses han invertido en Guatemala, generando empleo.\n\n‚óè  Infraestructura moderna: se han construido redes el√©ctricas nuevas y seguras.\n\n‚óè  Tr√°mites m√°s r√°pidos y sencillos para los usuarios.\n\n‚óè  Un servicio de energ√≠a seguro y de calidad.\n\n‚óè  Precios estables`,
    isAchievements: true,
  },
  {
    title: 'Trivia - ¬°Pon a prueba tu conocimiento!',
    isNewTrivia: true,
  },
  {
    title: 'Glosario animado',
    isGlossary: true,
  },
  {
    title: '¬øD√≥nde vemos el trabajo de la CNEE en la vida diaria?',
    description: `‚óè  Cuando enciendes la luz en tu cuarto.\n\n‚óè  Cuando cargas tu celular.\n\n‚óè  Cuando tu familia paga el recibo de la luz.\n\n‚óè  Cuando se va la energ√≠a y vuelve r√°pido.\n\n‚óè  Cuando exiges que no te cobren de m√°s.`,
    image: require('../../assets/cinco.png'),
  },
  {
    title: 'Actividad: Relaciona cada situaci√≥n y decide si es regulada o no por la CNEE',
    isImageTrivia: true,
  },
  {
    title: 'Conoce a Diego y c√≥mo descubre la CNEE',
    isStory: true,
  },
];

export default function CnneScreen() {
  const [step, setStep] = useState(0);
  const [typewriterComplete, setTypewriterComplete] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [hasScrolledToEnd, setHasScrolledToEnd] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);
  const navigation = useNavigation<CnneScreenNavigationProp>();
  const progress = (step + 1) / lessonSteps.length;
  const current = lessonSteps[step];

  // Steps with long info that require scroll to enable continue
  const infoStepsWithScroll = [
    '¬øQu√© hace la CNEE?',
    '¬øQu√© ha logrado la CNEE?',
    '¬øD√≥nde vemos el trabajo de la CNEE en la vida diaria?'
  ];

  const isScrollBlockStep = infoStepsWithScroll.includes(current.title);

  // Reset scroll state when step changes
  useEffect(() => {
    setHasScrolledToEnd(!isScrollBlockStep);
    setTypewriterComplete(false);
  }, [step, isScrollBlockStep]);

  // Detectar scroll al final para pasos informativos largos
  const handleScroll = (event: any) => {
    if (isScrollBlockStep) {
      const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;
      const paddingToBottom = 20;
      const isEnd = layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;
      setHasScrolledToEnd(isEnd);
    }
  };

  const handleNext = () => {
    if (step < lessonSteps.length - 1) {
      setStep(step + 1);
    }
  };

  const handleFinish = () => {
    setShowConfetti(true);
    setTimeout(() => {
      setShowConfetti(false);
      navigation.navigate('HomeMain');
    }, 3000);
  };



  return (
    <LinearGradient
      colors={['#1a0033', '#2d1b4d', '#3d2b5f', '#2d1b4d', '#1a0033']}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 1 }}
      style={styles.safeArea}
    >
      {/* Logo */}
      <Image
        source={require('../../assets/icon.png')}
        style={{
          position: 'absolute',
          top: height * 0.02,
          right: width * 0.04,
          width: width * 0.25,
          height: height * 0.05,
          zIndex: 99,
          opacity: 0.95,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.25,
              shadowRadius: 4,
            },
            android: {
              elevation: 4,
            },
          }),
        }}
        resizeMode="contain"
      />

      {/* Contenido scrolleable */}
      <ScrollView
        ref={scrollViewRef}
        style={styles.scrollContainer}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={true}
        onScroll={handleScroll}
        scrollEventThrottle={16}
      >
        {/* T√≠tulo - Oculto para Story */}
        {!current.isStory && (
          <Text style={styles.title}>{current.title}</Text>
        )}

        {/* Indicador visual de scroll en pasos informativos largos */}
        {isScrollBlockStep && !hasScrolledToEnd && (
          <Text style={{ textAlign: 'center', color: '#58CCF7', marginBottom: 8, fontSize: width * 0.037, fontWeight: '600' }}>
            üìñ Desliza hacia abajo para leer toda la informaci√≥n
          </Text>
        )}

        {/* Contenido */}
        {current.isTrivia ? (
          <TriviaCard onComplete={handleNext} />
        ) : current.isNewTrivia ? (
          <TriviaCardScreen5 onComplete={handleNext} />
        ) : current.isGlossary ? (
          <GlossaryGame onComplete={handleNext} />
        ) : current.isImageTrivia ? (
          <ImageTriviaCard onComplete={handleNext} />
        ) : current.isStory ? (
          <StorySlide onComplete={handleFinish} />
        ) : (
          <>
            {current.image && (
              <Image
                source={current.image}
                style={current.title === '¬øD√≥nde vemos el trabajo de la CNEE en la vida diaria?' ? styles.imageCinco : styles.image}
              />
            )}
            {/* Tarjeta de informaci√≥n con dise√±o profesional */}
            <LinearGradient
              colors={['rgba(45, 27, 77, 0.9)', 'rgba(26, 0, 51, 0.95)', 'rgba(45, 27, 77, 0.9)']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
              style={styles.descriptionCard}
            >
              {/* Border interior con gradiente */}
              <View style={styles.gradientBorder} />
              
              {/* Efectos de part√≠culas de estrellas sutiles */}
              <View style={styles.sparkleContainer}>
                <Text style={[styles.sparkle, { top: '5%', left: '88%' }]}>‚ú®</Text>
                <Text style={[styles.sparkle, { bottom: '5%', right: '88%' }]}>‚≠ê</Text>
              </View>
              
              <ScrollView
                style={styles.descriptionScroll}
                nestedScrollEnabled={true}
                showsVerticalScrollIndicator={true}
              >
                {current.title === '¬øD√≥nde vemos el trabajo de la CNEE en la vida diaria?' && current.description ? (
                  <TypewriterList
                    items={current.description.split('\n\n').map(item => item.replace('‚óè  ', '').trim()).filter(item => item.length > 0)}
                    itemStyle={styles.description}
                    speed={25}
                    itemDelay={1200}
                    startDelay={500}
                    onComplete={() => setTypewriterComplete(true)}
                    scrollViewRef={scrollViewRef}
                    autoScroll={false}
                  />
                ) : (
                  <Text style={styles.description}>{current.description || ''}</Text>
                )}
              </ScrollView>
            </LinearGradient>
          </>
        )}
      </ScrollView>

      {/* Elementos fijos en la parte inferior - Ocultos durante la trivia */}
      {!current.isTrivia && !current.isNewTrivia && !current.isGlossary && !current.isImageTrivia && !current.isStory &&
        (!current.title.includes('vida diaria') || typewriterComplete) && (
          <View style={styles.fixedBottom}>
            {/* Barra de progreso */}
            <View style={styles.progressBarContainer}>
              <View style={[styles.progressBarFill, { width: `${progress * 100}%` }]} />
            </View>

            {/* Indicadores de pasos */}
            <View style={styles.stepIndicators}>
              {lessonSteps.map((_, i) => (
                <View
                  key={i}
                  style={[
                    styles.circle,
                    i === step && styles.activeCircle,
                    { backgroundColor: i === step ? '#58CCF7' : 'rgba(255, 255, 255, 0.1)' },
                  ]}
                />
              ))}
            </View>

            {/* Bot√≥n continuar o finalizar, oculto hasta que el usuario lea todo en el paso informativo largo */}
            {step < lessonSteps.length - 1 && (
              ((isScrollBlockStep && hasScrolledToEnd) || !isScrollBlockStep) && (
                <TouchableOpacity
                  style={[styles.button, (isScrollBlockStep && !hasScrolledToEnd) && styles.disabledButton]}
                  onPress={handleNext}
                  disabled={isScrollBlockStep && !hasScrolledToEnd}
                >
                  <Text style={[styles.buttonText, (isScrollBlockStep && !hasScrolledToEnd) && styles.disabledButtonText]}>
                    {isScrollBlockStep && !hasScrolledToEnd ? 'üìñ Lee todo el contenido' : 'Continuar'}
                  </Text>
                </TouchableOpacity>
              )
            )}

            {step === lessonSteps.length - 1 && (
              <TouchableOpacity style={[styles.button, styles.finishButton]} onPress={handleFinish}>
                <Text style={styles.buttonText}>Finalizar lecci√≥n</Text>
              </TouchableOpacity>
            )}
          </View>
        )}

      {/* Confetti Effect */}
      {showConfetti && <Confetti />}
    </LinearGradient>
  );
}
